@model Webapp.Models.PerfilModelWeb
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<section id="app">
	<form id="formCuest">
		<div class="row">
			<div class="col-sm-6">
				<div class="card">
					<div class="card-body">
						<h5 class="card-title">Cuestionario Adicional</h5>
						
						<div class="row mb-3">
							<label for="" class="col-sm-2 col-form-label">Titulo</label>
							<div class="col-sm-10">
								<input class="form-control" name="titulo" v-model="model.titulo" required>
							</div>
						</div>
						
						
						<b>Preguntas</b>
						<table class="table minitabla table-hover">
							<tr>
								<th>Orden</th>
								<th>Texto</th>
								<th style="width:50px"></th>
							</tr>
							<tr v-for="p in model.preguntas">
								<td>
									<input v-model="p.orden" class="form-control input-sm" />
								</td>
								<td>
									<input v-model="p.texto" class="form-control input-sm" required/>
								</td>
								<td>
									<button type="button" class="btn btn-sm btn-primary" @@click="delPregunta(p)">
										<i class="bi bi-trash"></i>
									</button>
								</td>
							</tr>
						</table>
						<button type="button" class="btn btn-sm btn-primary" @@click="addPregunta()">
							<i class="bi bi-plus"></i>
							Adicionar Pregunta
						</button>
						
						<hr />

						<div class="mt-3 text-center">
							<button type="submit" class="btn btn-primary">
								<i class="bi bi-save"></i>
								Guardar
							</button>

						</div>
					</div>
				</div>
			</div>

		</div>
	</form>

</section>

@section Scripts {

	@await Html.PartialAsync("_Validation")

	<script>

		Vue.createApp({
			data() {
				return {
					model: @Html.Raw(ViewBag.modelo),
					baseurl: '@ViewBag.self',
				}
			},
			methods: {
				delPregunta(p) {
					if (!confirm("Eliminar esta pregunta?"))
						return
					var ix = this.model.preguntas.indexOf(p);
					this.model.preguntas.splice(ix, 1);
				},
				addPregunta() {
					this.model.preguntas.push({
						orden:null,texto:null,
					})
				},
				reordenar() {
					let list = _.sortBy(this.model.preguntas, ['orden'])
					this.model.preguntas = list
				},
			},
			mounted() {
				var self = this;

				$('#formCuest').validate({
					submitHandler() {
						var m = self.model
						var base = self.baseurl
						var url = base + '/guardar'
						$('#formCuest button').prop('disabled', true)
						jsonPost(url, m).then(r => {
							if (r.error) {
								return alert(r.error)
							}
							window.location.reload()
						})
						return false;
					}
				})
			}
		}).mount('#app')

	</script>
}
