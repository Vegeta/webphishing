@model Domain.Transferencia.PreguntaContentModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<style>
	.CodeMirror {
		border: 1px solid #eee;
		box-shadow: 3px 3px 6px rgba(0, 0, 0, .3);
		font-size: 12px;
	}

	.CodeMirror-scroll {
		overflow-y: auto;
		overflow-x: auto;
		height: 100%;
	}
</style>

<section id="app">

	<div class="row">
		<div class="col-sm-6">


			<div class="card">
				<div class="card-body">
					<h5 class="card-title">Editar HTML</h5>


					<textarea id="editor" :value="model.html"></textarea>

					@*<div class="small">
						<span>Pregunta: <b>@Model.Nombre</b></span>

						<span class="float-end">Imagenes {imgroot}</span>
					</div>*@

					<div class="mt-2">
						<button class="btn btn-dark btn-sm" @@click="autoFormatSelection()" type="button">Format</button>

						<button class="btn btn-dark btn-sm float-end" @@click="procesar()" type="button">
							<i class="bi bi-play"></i>
							Preview
						</button>
					</div>


					<hr />

					<div class="mt-3 text-center">
						<button type="button" class="btn btn-primary" @@click="save()">
							<i class="bi bi-save"></i>
							Guardar
						</button>

					</div>

					<hr />

					<div class="row">
						<div class="col-sm-4">

							<div>
								<b>Imagenes</b>

								<a @@click="reloadImages()" class="float-end">
									<i class="bi bi-arrow-clockwise"></i>
								</a>
							</div>


							<div class="table-responsive-sm" style="height:300px;overflow:auto">
								<table class="table minitabla">
									<tr v-for="i in imagenes">
										<td>
											<a @@click="verImagen(i)" href="javascript:;">{{ i }}</a>
										</td>
									</tr>
								</table>
							</div>

						</div>
						<div class="col-sm-8">
							<b>Vista {{ imagen }}</b>
							<div style="max-height:300px; overflow:auto">
								<img src="" id="imagen" style="width:100%;" />
							</div>
						</div>
					</div>

					<div>
						<form id="formUpload" enctype="multipart/form-data">

							<label class="form-label">Subir</label>

							<div class="input-group mb-3 input-group-sm">
								<input type="file" name="File" id="archivo" class="form-control" accept="image/*" required />
								<button class="btn btn-light" type="button" @@click="clearFile()">X</button>
							</div>

							<div>
								<button class="btn btn-primary btn-sm">
									Subir
								</button>
							</div>
						</form>
					</div>



				</div>
			</div>
		</div>

		<div class="col-sm-6">
			<div class="card">
				<div class="card-body">
					<h5 class="card-title">Preview</h5>
					<div id="preview"></div>
				</div>
			</div>
		</div>
	</div>


</section>

@section Scripts {

	@await Html.PartialAsync("_Validation")
	@await Html.PartialAsync("_Codemirror")

	<script>
		// https://thecodebarbarian.com/building-a-code-editor-with-codemirror.html
		Vue.createApp({
			data() {
				return {
					model: @Html.Raw(ViewBag.modelo),
					baseurl: '@ViewBag.self',
					imagenes: @Html.Raw(ViewBag.imagenes),
					imagen: null,
					html: ''
				}
			},
			methods: {
				clearFile() {
					document.querySelector('#archivo').value = '';
				},
				verImagen(name) {
					var base = '@Url.Content("~/ejercicios")'
					var url = base + '/' + name
					this.imagen = name
					$('#imagen').attr('src', url);
				},
				subirImagen(form) {
					var self = this;
					var fd = new FormData(form);
					var url = this.baseurl + '/uploadImage';
					$.ajax({
						url: url,
						type: 'post',
						data: fd,
						contentType: false,
						processData: false,
						success: function (data) {
							alert('Cargado');
							self.clearFile();
							self.reloadImages();
						},
						error: function () {
							alert('Error en carga');
						},
					})
					return false;
				},
				reloadImages() {
					var self = this;
					var url = this.baseurl + '/Imagenes';
					$.get(url).then(r => {
						self.imagenes = r
					});
				},
				procesar() {
					//var orig = this.model.html;
					var orig = this._editor.getValue()
					var base = '@Url.Content("~/ejercicios")'
					orig = orig.replaceAll('{imgroot}', base)
					$('#preview').html(orig);
				},
				save() {
					var model = this.model;
					var data = {
						id: model.id,
						html: this._editor.getValue()
					}
					$.post(this.baseurl + '/SaveHtml', data).then(r => {
						alert('guardado');
						model.html = data.html;
					})
				},
				// formatting
				getSelectedRange() {
					return { from: this._editor.getCursor(true), to: this._editor.getCursor(false) };
				},
				autoFormatSelection() {
					var range = this.getSelectedRange();
					this._editor.autoFormatRange(range.from, range.to);
				}
			},
			mounted() {
				var self = this;

				$('#preview').on("click", "a", function (e) {
					e.preventDefault()
					alert('clicked')
				});

				$('#formUpload').validate({
					submitHandler: self.subirImagen,
					errorPlacement: function (error, element) {
						if (element.parent('.input-group').length) {
							error.insertAfter(element.parent());
						} else {
							error.insertAfter(element);
						}
					}
				})

				this._editor = CodeMirror.fromTextArea(document.getElementById("editor"), {
					lineNumbers: true,
					mode: 'htmlmixed',
					theme: 'material',
					indentUnit: 4,
				});
				this._editor.setSize(null, 500);
				this.procesar();

			}
		}).mount('#app')

	</script>
}
