@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<div id="app">

	<examen :datos="datos" ref="examen"
			:url-imagen="urlImagen"
			:retro-path="retroPath"
			:base-url="baseUrl"></examen>

	<div v-if="reporte">

		<div class="container mb-5 mt-3">
			<div class="row">
				<div class="col-sm-12 col-lg-6">
					<resumen :model="reporte.modelo" :respuestas="reporte.respuestas" style="font-size: smaller"></resumen>
				</div>
				<div class="col-sm-12 col-lg-6">
					<graf-percepcion :model="reporte.modelo" :percepcion="reporte.percepcion"></graf-percepcion>
				</div>
			</div>

			<div class="mt-3">
				<respuestas :lista="reporte.respuestas" :retro-path="retroPath"></respuestas>
			</div>

			<div class="mt-3 text-center">
				<div class="card mt-3">
					<div class="card-body">
						<button type="button" class="btn btn-primary" @@click="openFin()">Terminar Evaluación</button>
						
						<a class="btn btn-secondary ms-2" target="_blank" href="@Url.Content("~/Evaluacion/Print")">Imprimir</a>
						
					</div>
				</div>
			</div>

		</div>

	</div>

	<div class="modal fade in" tabindex="-1" id="popupFin" data-bs-backdrop="static" data-bs-keyboard="false">
		<div class="modal-dialog modal-dialog-centered modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Listo!</h5>
				</div>
				<div class="modal-body p-sm-4">
					<p>
						Gracias por participar en esta prueba de detección de phishing, esperamos que su experiencia haya sido satisfactoria.
					</p>

					<div class="text-center">
						<button class="btn btn-primary" type="button" @@click="terminar()">Terminar</button>
					</div>

				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
				</div>
			</div>
		</div>
	</div>

</div>


@section Scripts {
	@await Html.PartialAsync("_Resultados")
	@await Html.PartialAsync("_Examen")

	<script>
		$('#footer .footer-top').hide();

		Vue.createApp({
				data() {
					return {
						baseUrl: '@ViewBag.self',
						urlImagen: '@Url.Content("~/ejercicios")',
						retroPath: '@Url.Content("~/retro")',

						datos: {
							model: @Html.Raw(ViewBag.model),
							pregunta: @Html.Raw(ViewBag.pregunta),
							cuest: @Html.Raw(ViewBag.cuest),
						},
						reporte: @Html.Raw(ViewBag.reporte),
					}
				},
				computed: {},
				methods: {
					openFin() {
						$('#popupFin').modal('show');
					},
					terminar() {
						$('button').prop('disabled', true)
						jsonPost(this.baseUrl + '/terminar').then(r => {
							window.location.href = r.url;
						})
					}
				},
				mounted() {
					const self = this;
					this.$refs.examen.verResultado = function(data) {
						this.modo = 'reporte'
						self.reporte = data;
					}
					if (this.reporte)
						this.$refs.examen.modo = 'reporte'
				},
				//extends: AppEvaluacion,
			})
			.component('cuestionario', Cuestionario)
			.component('grafPercepcion', GraficoPercepcion)
			.component('respuestas', CompRespuestas)
			.component('resumen', CompResumen)
			.component('detalleCuest', CompCuestDetalle)
			.component('examen', CompExamen)
			.use(globalDirectives)
			.mount('#app');

	</script>
}